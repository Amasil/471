{"ast":null,"code":"var _jsxFileName = \"/Users/zainabwaseem/Documents/GitHub/471/frontend/src/Inventory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./Inventory.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inventory = () => {\n  _s();\n  const [editableQuantities, setEditableQuantities] = useState({\n    \"A+\": false,\n    \"A-\": false,\n    \"B+\": false,\n    \"B-\": false,\n    \"AB+\": false,\n    \"AB-\": false,\n    \"O+\": false,\n    \"O-\": false\n  });\n  const [quantities, setQuantities] = useState({\n    \"A+\": 0,\n    \"A-\": 0,\n    \"B+\": 0,\n    \"B-\": 0,\n    \"AB+\": 0,\n    \"AB-\": 0,\n    \"O+\": 0,\n    \"O-\": 0\n  });\n  const [status, setStatus] = useState({\n    \"A+\": \"Healthy\",\n    \"A-\": \"Healthy\",\n    \"B+\": \"Healthy\",\n    \"B-\": \"Healthy\",\n    \"AB+\": \"Healthy\",\n    \"AB-\": \"Healthy\",\n    \"O+\": \"Healthy\",\n    \"O-\": \"Healthy\"\n  });\n  const [sendAlert, setSendAlert] = useState({\n    \"A+\": false,\n    \"A-\": false,\n    \"B+\": false,\n    \"B-\": false,\n    \"AB+\": false,\n    \"AB-\": false,\n    \"O+\": false,\n    \"O-\": false\n  });\n  useEffect(() => {\n    // Make an asynchronous call to fetch initial quantities from the database\n    const fetchInitialQuantities = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/bloodQuantities\");\n        const data = await response.json();\n\n        // Update the quantities state with the fetched data\n        setQuantities(data);\n\n        // Check and update status based on initial quantities\n        const updatedStatus = {};\n        Object.keys(data).forEach(bloodType => {\n          if (parseInt(data[bloodType], 10) < 20) {\n            updatedStatus[bloodType] = \"Low\";\n          } else {\n            updatedStatus[bloodType] = \"Healthy\";\n          }\n        });\n        setStatus(updatedStatus);\n      } catch (error) {\n        console.error(\"Error fetching initial quantities:\", error);\n      }\n    };\n\n    // Call the function to fetch initial quantities when the component mounts\n    fetchInitialQuantities();\n  }, []);\n  const handleSendAlert = bloodType => {\n    setSendAlert(prevSendAlert => ({\n      ...prevSendAlert,\n      [bloodType]: true\n    }));\n    alert(\"Alert sent!\");\n  };\n  const handleUpdateQuantity = bloodType => {\n    setEditableQuantities(prevEditableQuantities => ({\n      ...prevEditableQuantities,\n      [bloodType]: true\n    }));\n  };\n  const handleSaveQuantity = async bloodType => {\n    const updatedQuantities = {\n      ...quantities,\n      [bloodType]: parseInt(quantities[bloodType], 10)\n    };\n    setEditableQuantities(prevEditableQuantities => ({\n      ...prevEditableQuantities,\n      [bloodType]: false\n    }));\n    setQuantities(updatedQuantities);\n    if (parseInt(updatedQuantities[bloodType], 10) < 20) {\n      setStatus(prevStatus => ({\n        ...prevStatus,\n        [bloodType]: \"Low\"\n      }));\n    }\n    // Ask for confirmation before saving\n    const userConfirmed = window.confirm(\"Are you sure you want to update the quantity?\");\n    if (!userConfirmed) {\n      // If the user cancels, revert the changes\n      handleRefreshInventory();\n      return;\n    }\n    try {\n      // Send the updated data to the server\n      const response = await fetch(\"http://localhost:3000/updateQuantity\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          Blood_type: bloodType,\n          No_of_units: updatedQuantities[bloodType]\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to update blood quantity for ${bloodType}`);\n      }\n      console.log(`Blood quantity for ${bloodType} updated successfully.`);\n    } catch (error) {\n      console.error(\"Error updating blood quantity:\", error);\n      // Handle the error as needed (e.g., show an error message to the user)\n    }\n  };\n  const handleQuantityChange = (bloodType, event) => {\n    const updatedQuantities = {\n      ...quantities,\n      [bloodType]: parseInt(event.target.value, 10)\n    };\n    setQuantities(updatedQuantities);\n  };\n  const handleRefreshInventory = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/bloodQuantities\");\n      const data = await response.json();\n      setQuantities(data);\n      const updatedStatus = {};\n      Object.keys(data).forEach(bloodType => {\n        if (parseInt(data[bloodType], 10) < 20) {\n          updatedStatus[bloodType] = \"Low\";\n        } else {\n          updatedStatus[bloodType] = \"Healthy\";\n        }\n      });\n      setStatus(updatedStatus);\n    } catch (error) {\n      console.error(\"Error refreshing inventory:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-dashboard\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"inventory-h1\",\n          children: \"Inventory Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"header-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"header-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"header-inventory\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Inventory\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              class: \"refresh-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onC: true,\n                class: \"refresh-button\",\n                children: \"Refresh\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Blood Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity (units)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Send Alert\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: Object.keys(quantities).map(bloodType => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: bloodType\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editableQuantities[bloodType] ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: quantities[bloodType],\n                  onChange: e => handleQuantityChange(bloodType, e)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 23\n                }, this) : quantities[bloodType]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: status[bloodType]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 222,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editableQuantities[bloodType] ? /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleSaveQuantity(bloodType),\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 225,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateQuantity(bloodType),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 229,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  disabled: status[bloodType] !== \"Low\" || sendAlert[bloodType],\n                  onClick: () => handleSendAlert(bloodType),\n                  children: \"Send Alert\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 19\n              }, this)]\n            }, bloodType, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"refresh-button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleRefreshInventory,\n            className: \"refresh-button\",\n            children: \"Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n_s(Inventory, \"IeT77mlXk0vlBpN8KWIWwDCT+TQ=\");\n_c = Inventory;\nexport default Inventory;\nvar _c;\n$RefreshReg$(_c, \"Inventory\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Inventory","_s","editableQuantities","setEditableQuantities","quantities","setQuantities","status","setStatus","sendAlert","setSendAlert","fetchInitialQuantities","response","fetch","data","json","updatedStatus","Object","keys","forEach","bloodType","parseInt","error","console","handleSendAlert","prevSendAlert","alert","handleUpdateQuantity","prevEditableQuantities","handleSaveQuantity","updatedQuantities","prevStatus","userConfirmed","window","confirm","handleRefreshInventory","method","headers","body","JSON","stringify","Blood_type","No_of_units","ok","Error","log","handleQuantityChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","class","onC","map","type","onChange","e","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/zainabwaseem/Documents/GitHub/471/frontend/src/Inventory.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./Inventory.css\";\n\nconst Inventory = () => {\n  const [editableQuantities, setEditableQuantities] = useState({\n    \"A+\": false,\n    \"A-\": false,\n    \"B+\": false,\n    \"B-\": false,\n    \"AB+\": false,\n    \"AB-\": false,\n    \"O+\": false,\n    \"O-\": false,\n  });\n\n  const [quantities, setQuantities] = useState({\n    \"A+\": 0,\n    \"A-\": 0,\n    \"B+\": 0,\n    \"B-\": 0,\n    \"AB+\": 0,\n    \"AB-\": 0,\n    \"O+\": 0,\n    \"O-\": 0,\n  });\n\n  const [status, setStatus] = useState({\n    \"A+\": \"Healthy\",\n    \"A-\": \"Healthy\",\n    \"B+\": \"Healthy\",\n    \"B-\": \"Healthy\",\n    \"AB+\": \"Healthy\",\n    \"AB-\": \"Healthy\",\n    \"O+\": \"Healthy\",\n    \"O-\": \"Healthy\",\n  });\n\n  const [sendAlert, setSendAlert] = useState({\n    \"A+\": false,\n    \"A-\": false,\n    \"B+\": false,\n    \"B-\": false,\n    \"AB+\": false,\n    \"AB-\": false,\n    \"O+\": false,\n    \"O-\": false,\n  });\n\n  useEffect(() => {\n    // Make an asynchronous call to fetch initial quantities from the database\n    const fetchInitialQuantities = async () => {\n      try {\n        const response = await fetch(\"http://localhost:3000/bloodQuantities\");\n        const data = await response.json();\n\n        // Update the quantities state with the fetched data\n        setQuantities(data);\n\n        // Check and update status based on initial quantities\n        const updatedStatus = {};\n        Object.keys(data).forEach((bloodType) => {\n          if (parseInt(data[bloodType], 10) < 20) {\n            updatedStatus[bloodType] = \"Low\";\n          } else {\n            updatedStatus[bloodType] = \"Healthy\";\n          }\n        });\n\n        setStatus(updatedStatus);\n      } catch (error) {\n        console.error(\"Error fetching initial quantities:\", error);\n      }\n    };\n\n    // Call the function to fetch initial quantities when the component mounts\n    fetchInitialQuantities();\n  }, []);\n\n  const handleSendAlert = (bloodType) => {\n    setSendAlert((prevSendAlert) => ({\n      ...prevSendAlert,\n      [bloodType]: true,\n    }));\n    alert(\"Alert sent!\");\n  };\n\n  const handleUpdateQuantity = (bloodType) => {\n    setEditableQuantities((prevEditableQuantities) => ({\n      ...prevEditableQuantities,\n      [bloodType]: true,\n    }));\n  };\n\n  const handleSaveQuantity = async (bloodType) => {\n    const updatedQuantities = {\n      ...quantities,\n      [bloodType]: parseInt(quantities[bloodType], 10),\n    };\n\n    setEditableQuantities((prevEditableQuantities) => ({\n      ...prevEditableQuantities,\n      [bloodType]: false,\n    }));\n\n    setQuantities(updatedQuantities);\n\n    if (parseInt(updatedQuantities[bloodType], 10) < 20) {\n      setStatus((prevStatus) => ({\n        ...prevStatus,\n        [bloodType]: \"Low\",\n      }));\n    }\n    // Ask for confirmation before saving\n    const userConfirmed = window.confirm(\n      \"Are you sure you want to update the quantity?\"\n    );\n\n    if (!userConfirmed) {\n      // If the user cancels, revert the changes\n      handleRefreshInventory();\n      return;\n    }\n    try {\n      // Send the updated data to the server\n      const response = await fetch(\"http://localhost:3000/updateQuantity\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          Blood_type: bloodType,\n          No_of_units: updatedQuantities[bloodType],\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to update blood quantity for ${bloodType}`);\n      }\n\n      console.log(`Blood quantity for ${bloodType} updated successfully.`);\n    } catch (error) {\n      console.error(\"Error updating blood quantity:\", error);\n      // Handle the error as needed (e.g., show an error message to the user)\n    }\n  };\n\n  const handleQuantityChange = (bloodType, event) => {\n    const updatedQuantities = {\n      ...quantities,\n      [bloodType]: parseInt(event.target.value, 10),\n    };\n    setQuantities(updatedQuantities);\n  };\n  const handleRefreshInventory = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3000/bloodQuantities\");\n      const data = await response.json();\n\n      setQuantities(data);\n\n      const updatedStatus = {};\n      Object.keys(data).forEach((bloodType) => {\n        if (parseInt(data[bloodType], 10) < 20) {\n          updatedStatus[bloodType] = \"Low\";\n        } else {\n          updatedStatus[bloodType] = \"Healthy\";\n        }\n      });\n\n      setStatus(updatedStatus);\n    } catch (error) {\n      console.error(\"Error refreshing inventory:\", error);\n    }\n  };\n\n  return (\n    <div className=\"admin-dashboard\">\n      <div className=\"inventory-container\">\n        <header>\n          <h1 className=\"inventory-h1\">Inventory Dashboard</h1>\n        </header>\n\n        <section>\n          <table className=\"header-table\">\n            <tr className=\"header-row\">\n              <td className=\"header-inventory\"><h1>Inventory</h1></td>\n              <td class=\"refresh-button-container\">\n                <button\n                  onC\n                  class=\"refresh-button\"\n                >\n                  Refresh\n                </button>\n              </td>\n            </tr>\n          </table>\n          <table>\n            <thead>\n              <tr>\n                <th>Blood Type</th>\n                <th>Quantity (units)</th>\n                <th>Status</th>\n                <th>Update</th>\n                <th>Send Alert</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(quantities).map((bloodType) => (\n                <tr key={bloodType}>\n                  <td>{bloodType}</td>\n                  <td>\n                    {editableQuantities[bloodType] ? (\n                      <input\n                        type=\"text\"\n                        value={quantities[bloodType]}\n                        onChange={(e) => handleQuantityChange(bloodType, e)}\n                      />\n                    ) : (\n                      quantities[bloodType]\n                    )}\n                  </td>\n                  <td>{status[bloodType]}</td>\n                  <td>\n                    {editableQuantities[bloodType] ? (\n                      <button onClick={() => handleSaveQuantity(bloodType)}>\n                        Save\n                      </button>\n                    ) : (\n                      <button onClick={() => handleUpdateQuantity(bloodType)}>\n                        Update\n                      </button>\n                    )}\n                  </td>\n                  <td>\n                    <button\n                      disabled={\n                        status[bloodType] !== \"Low\" || sendAlert[bloodType]\n                      }\n                      onClick={() => handleSendAlert(bloodType)}\n                    >\n                      Send Alert\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <div className=\"refresh-button-container\">\n            <button onClick={handleRefreshInventory} className=\"refresh-button\">\n              Refresh\n            </button>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nexport default Inventory;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}